services:
  redis:
    image: redis
    networks:
      - my-network
    ports:
      - 6379:6379
    volumes:
      - redis:/data

  zookeeper:
    image: 'docker.io/bitnami/zookeeper:3-debian-10'
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - my-network

      
  kafka:
    image: 'docker.io/bitnami/kafka:2-debian-10'
    ports:
      - 9092:9092
      - 9093:9093
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://kafka:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    networks:
      - my-network


  task-management:
    build:
      context: .
      dockerfile: ./apps/task-management/Dockerfile
      target: development
    command: npm run start:dev task-management
    env_file:
      - ./apps/task-management/.env
    depends_on:
      - redis
      - mongodb-primary
      - mongodb-secondary
      - mongodb-arbiter
      - kafka
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "3000:3000"
    networks:
      - my-network

  notification:
    build:
      context: .
      dockerfile: ./apps/notification/Dockerfile
      target: development
    command: npm run start:dev notification
    depends_on:
      - redis
      - task-management
      - kafka
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "3001:3001"
    networks:
      - my-network

  mongodb-primary:
    image: docker.io/bitnami/mongodb:5.0
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-primary
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
    volumes:
      - "mongodb_master_data:/bitnami/mongodb"
    ports:
      - "27017:27017"
    networks:
      - my-network

  mongodb-secondary:
    image: docker.io/bitnami/mongodb:5.0
    depends_on:
      - mongodb-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-secondary
      - MONGODB_REPLICA_SET_MODE=secondary
      - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
    networks:
      - my-network

  mongodb-arbiter:
    image: docker.io/bitnami/mongodb:5.0
    depends_on:
      - mongodb-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-arbiter
      - MONGODB_REPLICA_SET_MODE=arbiter
      - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
    networks:
      - my-network

networks:
  my-network:
    driver: bridge

volumes:
  redis:
    driver: local
  mongodb_master_data:
    driver: local
